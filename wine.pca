{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Numerical libraries\n",
    "import numpy as np   \n",
    "# Import Linear Regression machine learning library\n",
    "from sklearn.linear_model import LinearRegression\n",
    "# to handle data in form of rows and columns \n",
    "import pandas as pd    \n",
    "# importing ploting libraries\n",
    "import matplotlib.pyplot as plt   \n",
    "#importing seaborn for statistical plots\n",
    "import seaborn as sns\n",
    "# To enable plotting graphs in Jupyter notebook\n",
    "%matplotlib inline "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Reading Data\n",
    "df=pd.read_csv('C:\\\\Users\\\\LENOVO Y520\\\\Downloads\\\\wine.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class_label</th>\n",
       "      <th>class_name</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>malic_acid</th>\n",
       "      <th>ash</th>\n",
       "      <th>alcalinity_of_ash</th>\n",
       "      <th>magnesium</th>\n",
       "      <th>total_phenols</th>\n",
       "      <th>flavanoids</th>\n",
       "      <th>nonflavanoid_phenols</th>\n",
       "      <th>proanthocyanins</th>\n",
       "      <th>color_intensity</th>\n",
       "      <th>hue</th>\n",
       "      <th>od280</th>\n",
       "      <th>proline</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Barolo</td>\n",
       "      <td>14.23</td>\n",
       "      <td>1.71</td>\n",
       "      <td>2.43</td>\n",
       "      <td>15.6</td>\n",
       "      <td>127</td>\n",
       "      <td>2.80</td>\n",
       "      <td>3.06</td>\n",
       "      <td>0.28</td>\n",
       "      <td>2.29</td>\n",
       "      <td>5.64</td>\n",
       "      <td>1.04</td>\n",
       "      <td>3.92</td>\n",
       "      <td>1065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Barolo</td>\n",
       "      <td>13.20</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2.14</td>\n",
       "      <td>11.2</td>\n",
       "      <td>100</td>\n",
       "      <td>2.65</td>\n",
       "      <td>2.76</td>\n",
       "      <td>0.26</td>\n",
       "      <td>1.28</td>\n",
       "      <td>4.38</td>\n",
       "      <td>1.05</td>\n",
       "      <td>3.40</td>\n",
       "      <td>1050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Barolo</td>\n",
       "      <td>13.16</td>\n",
       "      <td>2.36</td>\n",
       "      <td>2.67</td>\n",
       "      <td>18.6</td>\n",
       "      <td>101</td>\n",
       "      <td>2.80</td>\n",
       "      <td>3.24</td>\n",
       "      <td>0.30</td>\n",
       "      <td>2.81</td>\n",
       "      <td>5.68</td>\n",
       "      <td>1.03</td>\n",
       "      <td>3.17</td>\n",
       "      <td>1185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>Barolo</td>\n",
       "      <td>14.37</td>\n",
       "      <td>1.95</td>\n",
       "      <td>2.50</td>\n",
       "      <td>16.8</td>\n",
       "      <td>113</td>\n",
       "      <td>3.85</td>\n",
       "      <td>3.49</td>\n",
       "      <td>0.24</td>\n",
       "      <td>2.18</td>\n",
       "      <td>7.80</td>\n",
       "      <td>0.86</td>\n",
       "      <td>3.45</td>\n",
       "      <td>1480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>Barolo</td>\n",
       "      <td>13.24</td>\n",
       "      <td>2.59</td>\n",
       "      <td>2.87</td>\n",
       "      <td>21.0</td>\n",
       "      <td>118</td>\n",
       "      <td>2.80</td>\n",
       "      <td>2.69</td>\n",
       "      <td>0.39</td>\n",
       "      <td>1.82</td>\n",
       "      <td>4.32</td>\n",
       "      <td>1.04</td>\n",
       "      <td>2.93</td>\n",
       "      <td>735</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   class_label class_name  alcohol  malic_acid   ash  alcalinity_of_ash  \\\n",
       "0            1     Barolo    14.23        1.71  2.43               15.6   \n",
       "1            1     Barolo    13.20        1.78  2.14               11.2   \n",
       "2            1     Barolo    13.16        2.36  2.67               18.6   \n",
       "3            1     Barolo    14.37        1.95  2.50               16.8   \n",
       "4            1     Barolo    13.24        2.59  2.87               21.0   \n",
       "\n",
       "   magnesium  total_phenols  flavanoids  nonflavanoid_phenols  \\\n",
       "0        127           2.80        3.06                  0.28   \n",
       "1        100           2.65        2.76                  0.26   \n",
       "2        101           2.80        3.24                  0.30   \n",
       "3        113           3.85        3.49                  0.24   \n",
       "4        118           2.80        2.69                  0.39   \n",
       "\n",
       "   proanthocyanins  color_intensity   hue  od280  proline  \n",
       "0             2.29             5.64  1.04   3.92     1065  \n",
       "1             1.28             4.38  1.05   3.40     1050  \n",
       "2             2.81             5.68  1.03   3.17     1185  \n",
       "3             2.18             7.80  0.86   3.45     1480  \n",
       "4             1.82             4.32  1.04   2.93      735  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Knowing top 5 records in DataFrame\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(178, 15)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Knowing dimensions of DataFrame\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 178 entries, 0 to 177\n",
      "Data columns (total 15 columns):\n",
      "class_label             178 non-null int64\n",
      "class_name              178 non-null object\n",
      "alcohol                 178 non-null float64\n",
      "malic_acid              178 non-null float64\n",
      "ash                     178 non-null float64\n",
      "alcalinity_of_ash       178 non-null float64\n",
      "magnesium               178 non-null int64\n",
      "total_phenols           178 non-null float64\n",
      "flavanoids              178 non-null float64\n",
      "nonflavanoid_phenols    178 non-null float64\n",
      "proanthocyanins         178 non-null float64\n",
      "color_intensity         178 non-null float64\n",
      "hue                     178 non-null float64\n",
      "od280                   178 non-null float64\n",
      "proline                 178 non-null int64\n",
      "dtypes: float64(11), int64(3), object(1)\n",
      "memory usage: 20.9+ KB\n"
     ]
    }
   ],
   "source": [
    "#Knowing metadata of DataFrame \n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#type of DataFrame\n",
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# As column 'class_name' don't contibute anything to model so we are dropping the column\n",
    "df=df.drop('class_name',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class_label</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>malic_acid</th>\n",
       "      <th>ash</th>\n",
       "      <th>alcalinity_of_ash</th>\n",
       "      <th>magnesium</th>\n",
       "      <th>total_phenols</th>\n",
       "      <th>flavanoids</th>\n",
       "      <th>nonflavanoid_phenols</th>\n",
       "      <th>proanthocyanins</th>\n",
       "      <th>color_intensity</th>\n",
       "      <th>hue</th>\n",
       "      <th>od280</th>\n",
       "      <th>proline</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>14.23</td>\n",
       "      <td>1.71</td>\n",
       "      <td>2.43</td>\n",
       "      <td>15.6</td>\n",
       "      <td>127</td>\n",
       "      <td>2.80</td>\n",
       "      <td>3.06</td>\n",
       "      <td>0.28</td>\n",
       "      <td>2.29</td>\n",
       "      <td>5.64</td>\n",
       "      <td>1.04</td>\n",
       "      <td>3.92</td>\n",
       "      <td>1065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>13.20</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2.14</td>\n",
       "      <td>11.2</td>\n",
       "      <td>100</td>\n",
       "      <td>2.65</td>\n",
       "      <td>2.76</td>\n",
       "      <td>0.26</td>\n",
       "      <td>1.28</td>\n",
       "      <td>4.38</td>\n",
       "      <td>1.05</td>\n",
       "      <td>3.40</td>\n",
       "      <td>1050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>13.16</td>\n",
       "      <td>2.36</td>\n",
       "      <td>2.67</td>\n",
       "      <td>18.6</td>\n",
       "      <td>101</td>\n",
       "      <td>2.80</td>\n",
       "      <td>3.24</td>\n",
       "      <td>0.30</td>\n",
       "      <td>2.81</td>\n",
       "      <td>5.68</td>\n",
       "      <td>1.03</td>\n",
       "      <td>3.17</td>\n",
       "      <td>1185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>14.37</td>\n",
       "      <td>1.95</td>\n",
       "      <td>2.50</td>\n",
       "      <td>16.8</td>\n",
       "      <td>113</td>\n",
       "      <td>3.85</td>\n",
       "      <td>3.49</td>\n",
       "      <td>0.24</td>\n",
       "      <td>2.18</td>\n",
       "      <td>7.80</td>\n",
       "      <td>0.86</td>\n",
       "      <td>3.45</td>\n",
       "      <td>1480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>13.24</td>\n",
       "      <td>2.59</td>\n",
       "      <td>2.87</td>\n",
       "      <td>21.0</td>\n",
       "      <td>118</td>\n",
       "      <td>2.80</td>\n",
       "      <td>2.69</td>\n",
       "      <td>0.39</td>\n",
       "      <td>1.82</td>\n",
       "      <td>4.32</td>\n",
       "      <td>1.04</td>\n",
       "      <td>2.93</td>\n",
       "      <td>735</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   class_label  alcohol  malic_acid   ash  alcalinity_of_ash  magnesium  \\\n",
       "0            1    14.23        1.71  2.43               15.6        127   \n",
       "1            1    13.20        1.78  2.14               11.2        100   \n",
       "2            1    13.16        2.36  2.67               18.6        101   \n",
       "3            1    14.37        1.95  2.50               16.8        113   \n",
       "4            1    13.24        2.59  2.87               21.0        118   \n",
       "\n",
       "   total_phenols  flavanoids  nonflavanoid_phenols  proanthocyanins  \\\n",
       "0           2.80        3.06                  0.28             2.29   \n",
       "1           2.65        2.76                  0.26             1.28   \n",
       "2           2.80        3.24                  0.30             2.81   \n",
       "3           3.85        3.49                  0.24             2.18   \n",
       "4           2.80        2.69                  0.39             1.82   \n",
       "\n",
       "   color_intensity   hue  od280  proline  \n",
       "0             5.64  1.04   3.92     1065  \n",
       "1             4.38  1.05   3.40     1050  \n",
       "2             5.68  1.03   3.17     1185  \n",
       "3             7.80  0.86   3.45     1480  \n",
       "4             4.32  1.04   2.93      735  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>class_label</th>\n",
       "      <td>178.0</td>\n",
       "      <td>1.938202</td>\n",
       "      <td>0.775035</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>3.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alcohol</th>\n",
       "      <td>178.0</td>\n",
       "      <td>13.000618</td>\n",
       "      <td>0.811827</td>\n",
       "      <td>11.03</td>\n",
       "      <td>12.3625</td>\n",
       "      <td>13.050</td>\n",
       "      <td>13.6775</td>\n",
       "      <td>14.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>malic_acid</th>\n",
       "      <td>178.0</td>\n",
       "      <td>2.336348</td>\n",
       "      <td>1.117146</td>\n",
       "      <td>0.74</td>\n",
       "      <td>1.6025</td>\n",
       "      <td>1.865</td>\n",
       "      <td>3.0825</td>\n",
       "      <td>5.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ash</th>\n",
       "      <td>178.0</td>\n",
       "      <td>2.366517</td>\n",
       "      <td>0.274344</td>\n",
       "      <td>1.36</td>\n",
       "      <td>2.2100</td>\n",
       "      <td>2.360</td>\n",
       "      <td>2.5575</td>\n",
       "      <td>3.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alcalinity_of_ash</th>\n",
       "      <td>178.0</td>\n",
       "      <td>19.494944</td>\n",
       "      <td>3.339564</td>\n",
       "      <td>10.60</td>\n",
       "      <td>17.2000</td>\n",
       "      <td>19.500</td>\n",
       "      <td>21.5000</td>\n",
       "      <td>30.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>magnesium</th>\n",
       "      <td>178.0</td>\n",
       "      <td>99.741573</td>\n",
       "      <td>14.282484</td>\n",
       "      <td>70.00</td>\n",
       "      <td>88.0000</td>\n",
       "      <td>98.000</td>\n",
       "      <td>107.0000</td>\n",
       "      <td>162.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_phenols</th>\n",
       "      <td>178.0</td>\n",
       "      <td>2.295112</td>\n",
       "      <td>0.625851</td>\n",
       "      <td>0.98</td>\n",
       "      <td>1.7425</td>\n",
       "      <td>2.355</td>\n",
       "      <td>2.8000</td>\n",
       "      <td>3.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flavanoids</th>\n",
       "      <td>178.0</td>\n",
       "      <td>2.029270</td>\n",
       "      <td>0.998859</td>\n",
       "      <td>0.34</td>\n",
       "      <td>1.2050</td>\n",
       "      <td>2.135</td>\n",
       "      <td>2.8750</td>\n",
       "      <td>5.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nonflavanoid_phenols</th>\n",
       "      <td>178.0</td>\n",
       "      <td>0.361854</td>\n",
       "      <td>0.124453</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.2700</td>\n",
       "      <td>0.340</td>\n",
       "      <td>0.4375</td>\n",
       "      <td>0.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>proanthocyanins</th>\n",
       "      <td>178.0</td>\n",
       "      <td>1.590899</td>\n",
       "      <td>0.572359</td>\n",
       "      <td>0.41</td>\n",
       "      <td>1.2500</td>\n",
       "      <td>1.555</td>\n",
       "      <td>1.9500</td>\n",
       "      <td>3.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>color_intensity</th>\n",
       "      <td>178.0</td>\n",
       "      <td>5.058090</td>\n",
       "      <td>2.318286</td>\n",
       "      <td>1.28</td>\n",
       "      <td>3.2200</td>\n",
       "      <td>4.690</td>\n",
       "      <td>6.2000</td>\n",
       "      <td>13.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hue</th>\n",
       "      <td>178.0</td>\n",
       "      <td>0.957449</td>\n",
       "      <td>0.228572</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.7825</td>\n",
       "      <td>0.965</td>\n",
       "      <td>1.1200</td>\n",
       "      <td>1.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>od280</th>\n",
       "      <td>178.0</td>\n",
       "      <td>2.611685</td>\n",
       "      <td>0.709990</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.9375</td>\n",
       "      <td>2.780</td>\n",
       "      <td>3.1700</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>proline</th>\n",
       "      <td>178.0</td>\n",
       "      <td>746.893258</td>\n",
       "      <td>314.907474</td>\n",
       "      <td>278.00</td>\n",
       "      <td>500.5000</td>\n",
       "      <td>673.500</td>\n",
       "      <td>985.0000</td>\n",
       "      <td>1680.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      count        mean         std     min       25%  \\\n",
       "class_label           178.0    1.938202    0.775035    1.00    1.0000   \n",
       "alcohol               178.0   13.000618    0.811827   11.03   12.3625   \n",
       "malic_acid            178.0    2.336348    1.117146    0.74    1.6025   \n",
       "ash                   178.0    2.366517    0.274344    1.36    2.2100   \n",
       "alcalinity_of_ash     178.0   19.494944    3.339564   10.60   17.2000   \n",
       "magnesium             178.0   99.741573   14.282484   70.00   88.0000   \n",
       "total_phenols         178.0    2.295112    0.625851    0.98    1.7425   \n",
       "flavanoids            178.0    2.029270    0.998859    0.34    1.2050   \n",
       "nonflavanoid_phenols  178.0    0.361854    0.124453    0.13    0.2700   \n",
       "proanthocyanins       178.0    1.590899    0.572359    0.41    1.2500   \n",
       "color_intensity       178.0    5.058090    2.318286    1.28    3.2200   \n",
       "hue                   178.0    0.957449    0.228572    0.48    0.7825   \n",
       "od280                 178.0    2.611685    0.709990    1.27    1.9375   \n",
       "proline               178.0  746.893258  314.907474  278.00  500.5000   \n",
       "\n",
       "                          50%       75%      max  \n",
       "class_label             2.000    3.0000     3.00  \n",
       "alcohol                13.050   13.6775    14.83  \n",
       "malic_acid              1.865    3.0825     5.80  \n",
       "ash                     2.360    2.5575     3.23  \n",
       "alcalinity_of_ash      19.500   21.5000    30.00  \n",
       "magnesium              98.000  107.0000   162.00  \n",
       "total_phenols           2.355    2.8000     3.88  \n",
       "flavanoids              2.135    2.8750     5.08  \n",
       "nonflavanoid_phenols    0.340    0.4375     0.66  \n",
       "proanthocyanins         1.555    1.9500     3.58  \n",
       "color_intensity         4.690    6.2000    13.00  \n",
       "hue                     0.965    1.1200     1.71  \n",
       "od280                   2.780    3.1700     4.00  \n",
       "proline               673.500  985.0000  1680.00  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# To know summary statistics of DataFrame\n",
    "df.describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2c830bf5860>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Class-2 is having more samples compared to class-1 and class-3\n",
    "df.class_label.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Outlier Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2c83103cd30>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df.magnesium)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2c831097320>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df.flavanoids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2c8310e7c50>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df.color_intensity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2c831143978>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df.alcalinity_of_ash)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2c832ca0390>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "x=df.drop(['class_label'],axis=1)\n",
    "scaler=StandardScaler().fit(x)\n",
    "y=pd.DataFrame(scaler.transform(x),columns=x.columns)\n",
    "y.boxplot(vert=False,figsize=(15,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alcohol</th>\n",
       "      <th>malic_acid</th>\n",
       "      <th>ash</th>\n",
       "      <th>alcalinity_of_ash</th>\n",
       "      <th>magnesium</th>\n",
       "      <th>total_phenols</th>\n",
       "      <th>flavanoids</th>\n",
       "      <th>nonflavanoid_phenols</th>\n",
       "      <th>proanthocyanins</th>\n",
       "      <th>color_intensity</th>\n",
       "      <th>hue</th>\n",
       "      <th>od280</th>\n",
       "      <th>proline</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.518613</td>\n",
       "      <td>-0.562250</td>\n",
       "      <td>0.232053</td>\n",
       "      <td>-1.169593</td>\n",
       "      <td>1.913905</td>\n",
       "      <td>0.808997</td>\n",
       "      <td>1.034819</td>\n",
       "      <td>-0.659563</td>\n",
       "      <td>1.224884</td>\n",
       "      <td>0.251717</td>\n",
       "      <td>0.362177</td>\n",
       "      <td>1.847920</td>\n",
       "      <td>1.013009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.246290</td>\n",
       "      <td>-0.499413</td>\n",
       "      <td>-0.827996</td>\n",
       "      <td>-2.490847</td>\n",
       "      <td>0.018145</td>\n",
       "      <td>0.568648</td>\n",
       "      <td>0.733629</td>\n",
       "      <td>-0.820719</td>\n",
       "      <td>-0.544721</td>\n",
       "      <td>-0.293321</td>\n",
       "      <td>0.406051</td>\n",
       "      <td>1.113449</td>\n",
       "      <td>0.965242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.196879</td>\n",
       "      <td>0.021231</td>\n",
       "      <td>1.109334</td>\n",
       "      <td>-0.268738</td>\n",
       "      <td>0.088358</td>\n",
       "      <td>0.808997</td>\n",
       "      <td>1.215533</td>\n",
       "      <td>-0.498407</td>\n",
       "      <td>2.135968</td>\n",
       "      <td>0.269020</td>\n",
       "      <td>0.318304</td>\n",
       "      <td>0.788587</td>\n",
       "      <td>1.395148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.691550</td>\n",
       "      <td>-0.346811</td>\n",
       "      <td>0.487926</td>\n",
       "      <td>-0.809251</td>\n",
       "      <td>0.930918</td>\n",
       "      <td>2.491446</td>\n",
       "      <td>1.466525</td>\n",
       "      <td>-0.981875</td>\n",
       "      <td>1.032155</td>\n",
       "      <td>1.186068</td>\n",
       "      <td>-0.427544</td>\n",
       "      <td>1.184071</td>\n",
       "      <td>2.334574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.295700</td>\n",
       "      <td>0.227694</td>\n",
       "      <td>1.840403</td>\n",
       "      <td>0.451946</td>\n",
       "      <td>1.281985</td>\n",
       "      <td>0.808997</td>\n",
       "      <td>0.663351</td>\n",
       "      <td>0.226796</td>\n",
       "      <td>0.401404</td>\n",
       "      <td>-0.319276</td>\n",
       "      <td>0.362177</td>\n",
       "      <td>0.449601</td>\n",
       "      <td>-0.037874</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    alcohol  malic_acid       ash  alcalinity_of_ash  magnesium  \\\n",
       "0  1.518613   -0.562250  0.232053          -1.169593   1.913905   \n",
       "1  0.246290   -0.499413 -0.827996          -2.490847   0.018145   \n",
       "2  0.196879    0.021231  1.109334          -0.268738   0.088358   \n",
       "3  1.691550   -0.346811  0.487926          -0.809251   0.930918   \n",
       "4  0.295700    0.227694  1.840403           0.451946   1.281985   \n",
       "\n",
       "   total_phenols  flavanoids  nonflavanoid_phenols  proanthocyanins  \\\n",
       "0       0.808997    1.034819             -0.659563         1.224884   \n",
       "1       0.568648    0.733629             -0.820719        -0.544721   \n",
       "2       0.808997    1.215533             -0.498407         2.135968   \n",
       "3       2.491446    1.466525             -0.981875         1.032155   \n",
       "4       0.808997    0.663351              0.226796         0.401404   \n",
       "\n",
       "   color_intensity       hue     od280   proline  \n",
       "0         0.251717  0.362177  1.847920  1.013009  \n",
       "1        -0.293321  0.406051  1.113449  0.965242  \n",
       "2         0.269020  0.318304  0.788587  1.395148  \n",
       "3         1.186068 -0.427544  1.184071  2.334574  \n",
       "4        -0.319276  0.362177  0.449601 -0.037874  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing PCA from sklearn library\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3.31675081e+00, -1.44346263e+00, -1.65739045e-01, ...,\n",
       "        -4.51563395e-01,  5.40810414e-01, -6.62386309e-02],\n",
       "       [ 2.20946492e+00,  3.33392887e-01, -2.02645737e+00, ...,\n",
       "        -1.42657306e-01,  3.88237741e-01,  3.63650247e-03],\n",
       "       [ 2.51674015e+00, -1.03115130e+00,  9.82818670e-01, ...,\n",
       "        -2.86672847e-01,  5.83573183e-04,  2.17165104e-02],\n",
       "       ...,\n",
       "       [-2.67783946e+00, -2.76089913e+00, -9.40941877e-01, ...,\n",
       "         5.12492025e-01,  6.98766451e-01,  7.20776948e-02],\n",
       "       [-2.38701709e+00, -2.29734668e+00, -5.50696197e-01, ...,\n",
       "         2.99821968e-01,  3.39820654e-01, -2.18657605e-02],\n",
       "       [-3.20875816e+00, -2.76891957e+00,  1.01391366e+00, ...,\n",
       "        -2.29964331e-01, -1.88787963e-01, -3.23964720e-01]])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca=PCA(n_components=13)\n",
    "pf=pca.fit_transform(y)\n",
    "pf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3.31675081e+00, -1.44346263e+00, -1.65739045e-01, ...,\n",
       "        -4.51563395e-01,  5.40810414e-01, -6.62386309e-02],\n",
       "       [ 2.20946492e+00,  3.33392887e-01, -2.02645737e+00, ...,\n",
       "        -1.42657306e-01,  3.88237741e-01,  3.63650247e-03],\n",
       "       [ 2.51674015e+00, -1.03115130e+00,  9.82818670e-01, ...,\n",
       "        -2.86672847e-01,  5.83573183e-04,  2.17165104e-02],\n",
       "       ...,\n",
       "       [-2.67783946e+00, -2.76089913e+00, -9.40941877e-01, ...,\n",
       "         5.12492025e-01,  6.98766451e-01,  7.20776948e-02],\n",
       "       [-2.38701709e+00, -2.29734668e+00, -5.50696197e-01, ...,\n",
       "         2.99821968e-01,  3.39820654e-01, -2.18657605e-02],\n",
       "       [-3.20875816e+00, -2.76891957e+00,  1.01391366e+00, ...,\n",
       "        -2.29964331e-01, -1.88787963e-01, -3.23964720e-01]])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_1=PCA(n_components=8)\n",
    "rf=pca.fit_transform(y)\n",
    "rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3.31675081e+00, -1.44346263e+00, -1.65739045e-01, ...,\n",
       "        -4.51563395e-01,  5.40810414e-01, -6.62386309e-02],\n",
       "       [ 2.20946492e+00,  3.33392887e-01, -2.02645737e+00, ...,\n",
       "        -1.42657306e-01,  3.88237741e-01,  3.63650247e-03],\n",
       "       [ 2.51674015e+00, -1.03115130e+00,  9.82818670e-01, ...,\n",
       "        -2.86672847e-01,  5.83573183e-04,  2.17165104e-02],\n",
       "       ...,\n",
       "       [-2.67783946e+00, -2.76089913e+00, -9.40941877e-01, ...,\n",
       "         5.12492025e-01,  6.98766451e-01,  7.20776948e-02],\n",
       "       [-2.38701709e+00, -2.29734668e+00, -5.50696197e-01, ...,\n",
       "         2.99821968e-01,  3.39820654e-01, -2.18657605e-02],\n",
       "       [-3.20875816e+00, -2.76891957e+00,  1.01391366e+00, ...,\n",
       "        -2.29964331e-01, -1.88787963e-01, -3.23964720e-01]])"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_2=PCA(n_components=5)\n",
    "sf=pca.fit_transform(y)\n",
    "sf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.36198848, 0.55406338, 0.66529969, 0.73598999, 0.80162293,\n",
       "       0.85098116, 0.89336795, 0.92017544, 0.94239698, 0.96169717,\n",
       "       0.97906553, 0.99204785, 1.        ])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Cumulative proportions of components\n",
    "np.cumsum(pca.explained_variance_ratio_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "b=pca.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2c8319fc438>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting of cumulative proportion with number of components\n",
    "sns.barplot(x=np.arange(1,14),y=b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics\n",
    "import statsmodels.formula.api as smf\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df.drop('class_label',axis=1)\n",
    "y=df['class_label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(142, 13)"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9722222222222222\n",
      "[[13  1  0]\n",
      " [ 0 14  0]\n",
      " [ 0  0  8]]\n"
     ]
    }
   ],
   "source": [
    "LR1 = LogisticRegression()\n",
    "LR1.fit(X_train, Y_train)\n",
    "y1_predict = LR1.predict(X_test)\n",
    "y1_acc = metrics.accuracy_score(Y_test,y1_predict)\n",
    "print(y1_acc)\n",
    "y1_cm=metrics.confusion_matrix(Y_test,y1_predict)\n",
    "print(y1_cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=pd.DataFrame(pca.fit_transform(y))\n",
    "b=df['class_label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(142, 13)"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(a, b, test_size=0.2, random_state=42)\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "[[14  0  0]\n",
      " [ 0 14  0]\n",
      " [ 0  0  8]]\n"
     ]
    }
   ],
   "source": [
    "LR1 = LogisticRegression()\n",
    "LR1.fit(X_train, Y_train)\n",
    "y1_predict = LR1.predict(X_test)\n",
    "y1_acc = metrics.accuracy_score(Y_test,y1_predict)\n",
    "print(y1_acc)\n",
    "y1_cm=metrics.confusion_matrix(Y_test,y1_predict)\n",
    "print(y1_cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression with PCA (n_components=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "c=pd.DataFrame(rf)\n",
    "d=df['class_label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(c, d, test_size=0.2, random_state=42)\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "[[14  0  0]\n",
      " [ 0 14  0]\n",
      " [ 0  0  8]]\n"
     ]
    }
   ],
   "source": [
    "LR1 = LogisticRegression()\n",
    "LR1.fit(X_train, Y_train)\n",
    "y1_predict = LR1.predict(X_test)\n",
    "y1_acc = metrics.accuracy_score(Y_test,y1_predict)\n",
    "print(y1_acc)\n",
    "y1_cm=metrics.confusion_matrix(Y_test,y1_predict)\n",
    "print(y1_cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic regression with PCA(n_components=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "c1=pd.DataFrame(sf)\n",
    "d1=df['class_label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(c1, d1, test_size=0.2, random_state=42)\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "[[14  0  0]\n",
      " [ 0 14  0]\n",
      " [ 0  0  8]]\n"
     ]
    }
   ],
   "source": [
    "LR2 = LogisticRegression()\n",
    "LR2.fit(X_train, Y_train)\n",
    "y1_predict = LR2.predict(X_test)\n",
    "y1_acc = metrics.accuracy_score(Y_test,y1_predict)\n",
    "print(y1_acc)\n",
    "y1_cm=metrics.confusion_matrix(Y_test,y1_predict)\n",
    "print(y1_cm)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
